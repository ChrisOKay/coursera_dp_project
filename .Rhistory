reset(0)
reset
reset()
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(w*(x-mean(x))^2)
sum(w*(x-0.15)^2)
sum(w*(x-1.07)^2)
sum(w*(x-0.3)^2)
sum(w*(x-0.0025)^2)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
?lm
fit <- lm(y ~ x - 1)
fit[1]
fit[2]
fit[1]
fit <- lm(x ~ y - 1)
fit[1]
fit[0]
data(mtcars)
lm(mpg~weight,cars)
lm(mpg~weight,mtcars)
lm(mpg~wt,cars)
lm(mpg~wt,mtcars)
1.5*0.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
ln(y~x)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
q()
library(usingR)
data("anscombe")
example("anscombe")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
lm(y~x)
fit <- lm(y~x)
summary(fit)
beta1 <- cor(y,x)*sd(y)/sd(x9)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y) - beta1*mean(x)
e <- y-beta0-beta1(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
seBeta0 <- (1/n + mean(x)^2/ssx)^.5*sigma
seBeta1 <- sigma/sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1/seBeta1;
pBeta0 <- 2*pt(abs(tBeta0),df=n-2, lower.tail=FALSE)
pBeta1 <- 2*pt(abs(tBeta1),df=n-2, lower.tail=FALSE)
pBeta1
tBeta1
beta1
seBeta1
beta1
sigma
sigma
n
length(x)
n <-length(y)
beta1sigma <- sqrt(sum(e^2)/(n-2))
e <- y-beta0-beta1*x
> sigma <- sqrt(sum(e^2)/(n-2))
> ssx <- sum((x-mean(x))^2)
> seBeta0 <- (1/n + mean(x)^2/ssx)^.5*sigma
> seBeta1 <- sigma/sqrt(ssx)
> tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1/seBeta1;
> pBeta0 <- 2*pt(abs(tBeta0),df=n-2, lower.tail=FALSE)
> pBeta1 <- 2*pt(abs(tBeta1),df=n-2, lower.tail=FALSE)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
seBeta0 <- (1/n + mean(x)^2/ssx)^.5*sigma
seBeta1 <- sigma/sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1/seBeta1;
pBeta0 <- 2*pt(abs(tBeta0),df=n-2, lower.tail=FALSE)
pBeta1 <- 2*pt(abs(tBeta1),df=n-2, lower.tail=FALSE)
pBeta1
sigma
data(mtcars)
fit <- lm(mtcars$mpg,mtcars$wt)
fit <- lm(mtcars$mpg~mtcars$wt)
fit <- lm(mtcars$mpg~mtcars$wt-mean(mtcars$wt))
fit <- lm(mtcars$mpg~(mtcars$wt-mean(mtcars$wt))
)
mtcars$wt-mean(mtcars$wt)
fit <- lm(mtcars$mpg~(mtcars$wt-mean(mtcars$wt)))
meanWt = mtcars$wt-mean(mtcars$wt)
fit <- lm(mtcars$mpg~meanWt)
summary(fit)
20.0906-37.313
?lm
sumCoef <- summary(fit)$coefficients
cumCoef[1,1]+c(1,1)*qt(.975,df=fit$df)*sumCoef[1,2]
sumCoef[1,1]+c(1,1)*qt(.975,df=fit$df)*sumCoef[1,2]
sumCoef[1,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[1,2]
?mtcars
meanWt
mean(mtcars$wt)
(sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2])/1000
(sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2])/1000*21725
?predict
predict(fit)
predict(lm(y ~ x), x = 3)
fit
-5.344*-0.217
+20.091
+20.091+1.159648
(sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2])*2
(sumCoef[2,1]+c(-1,1)*qt(.975,df=fit$df)*sumCoef[2,2])
fit2 <- lm(y~x-1)
summary(fit2)
summary(fit)
3.046/0.2207
fit$residuals
sum((y-fit$residuals)^2)
(y-fit$residuals)^2
size(fit$residuals)
length(fit$residuals)
length(y)
fit2 <- lm(mtcars$mpg~meanWt-1)
summary(fit2)
data("mtcars")
q()
?attach
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
attach(mtcars)
swirl()
library(swirl)
swirl()
install_from_swirl("Regression Models")
install_from_swirl("Regression Models")
swirl()
2
43
1
2
4
skip()
2
3
1
2
skip()
skip()
skip()
skip()
skip()
skip()
1
0
skip
help()
exit()
quit()
library(swirl)
swirl()
2
1
2
1
2
skip()
2
1
2
3
1
2
1
skip()
1
2
skip()
skip()
skip()
skip()
skip()
1
3
rH3zphKTs0C3jFW3
skip()
skip()
skip()
skip()
skip()
1
2
3
1
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
1
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
as.integer(head(hits[,'date'])
)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
install.packages(caret)
install.packages(caret)
library(caret)
install.packages('caret')
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FaLSE)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=false)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=f)
inTrain <- createDataPartition(y=spam$type, p=0.75)
inTrain
training <- spam[inTrain,]
=createDataPartition
?createDataPartition
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
dim(testing)
set.seed(32343)
modelFit <- train(type~.,data=training, method = "glm")
install.packages('e1071')
install.packages('e1071', dependencies=TRUE)
modelFit <- train(type~.,data=training, method = "glm")
warnings()
modelFit
modelFit$finalModel
predictions <- predict(modelFit, newdata=testing)
predictions
confusionMatrix(preditions, testing$type)
confusionMatrix(predictions, testing$type)
dim(training)
set.seed(32323)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = TURE)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = TRZE)
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = TRUE)
sapply(folds, length)
folds[[1]][1:10]
folds[[2]][1:10]
folds <- createFolds(y=spam$type, k=10, list=TRUE, returnTrain = FALSE)
sapply(folds, length)
folds <- createResample(y=spam$type, times=10,LIST=TRUE)
folds <- createResample(y=spam$type, times=10,list=TRUE)
sapply(folds, length)
folds[[1]][1:10]
tme = 1:1000
folds <- createTimeSlices(y=tme, initialWindow = 20, horizon = 10)
names(folds)
folds$train[[1]]
folds$test[[1]]
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages('ElemStatLearn')
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
install.packages('caret')
install.packages('caret')
install.packages("caret", dependencies = c("Depends", "Suggests"))
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
library(caret)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
pred_rf <- predict(mod_rf, vowel.test)
pred_gbm <- predict(mod_gbm, vowel.test)
confusionMatrix(pred_rf, vowel.test$y)$overall[1]
confusionMatrix(pred_gbm, vowel.test$y)$overall[1]
predDF <- data.frame(pred_rf, pred_gbm, y = vowel.test$y)
sum(pred_rf[predDF$pred_rf == predDF$pred_gbm] ==
predDF$y[predDF$pred_rf == predDF$pred_gbm]) /
sum(predDF$pred_rf == predDF$pred_gbm)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages('AppliedPredictiveModeling')
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages('CORElearn')
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mod_rf <- train(diagnosis ~ ., data = training, method = "rf")
mod_gbm <- train(diagnosis ~ ., data = training, method = "gbm")
mod_lda <- train(diagnosis ~ ., data = training, method = "lda")
pred_rf <- predict(mod_rf, testing)
pred_gbm <- predict(mod_gbm, testing)
pred_lda <- predict(mod_lda, testing)
predDF <- data.frame(pred_rf, pred_gbm, pred_lda, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(pred_rf, testing$diagnosis)$overall[1]
confusionMatrix(pred_gbm, testing$diagnosis)$overall[1]
confusionMatrix(pred_lda, testing$diagnosis)$overall[1]
confusionMatrix(combPred, testing$diagnosis)$overall[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
mod_lasso
library(elasticnet)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
getwd()
library(lubridate) # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages('fracdiff')
library(forecast)
mod_ts <- bats(tstrain)
fcast <- forecast(mod_ts, level = 95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
set.seed(325)
library(e1071)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
knitr::opts_chunk$set(echo = TRUE)
library(caret); library(rattle); library(rpart); library(rpart.plot); library(randomForest); library(repmis)
install.packages('rattle')
install.packages('rattle')
library(caret); library(rattle); library(rpart); library(rpart.plot); library(randomForest); library(repmis)
install.packages('RGtk2')
library(caret); library(rattle); library(rpart); library(rpart.plot); library(randomForest); library(repmis)
library(caret); library(rattle); library(rpart); library(rpart.plot); library(randomForest); library(repmis)
install.packages('repmis')
library(caret); library(rattle); library(rpart); library(rpart.plot); library(randomForest); library(repmis)
training <- read.csv("pml-training.csv", na.strings = c("NA", ""))
testing <- read.csv("pml-testing.csv", na.strings = c("NA", ""))
View(students4)
View(training)
View(testing)
View(training)
library(caret); library(rattle); library(rpart); library(rpart.plot); library(randomForest); library(repmis)
training <- read.csv("pml-training.csv", na.strings = c("NA", ""))
testing <- read.csv("pml-testing.csv", na.strings = c("NA", ""))
library(caret); library(rattle); library(rpart); library(rpart.plot); library(randomForest); library(repmis)
training <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!",""))
testing <- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
dim(training); dim(testing)
?nearZeroVar
noVar <- nearZeroVar(myTraining, saveMetrics=TRUE)
noVar <- nearZeroVar(training, saveMetrics=TRUE)
head(noVar)
mean(noVar)
mean(noVar$nzv)
features <- names(training[,!colSums(is.na(dt_testing))])[8:59]
features <- names(testing[,!colSums(is.na(testing))])[8:59]
noVar <- nearZeroVar(training, saveMetrics=TRUE)
mean(noVar$nzv)
training <- training[,noVar$nzv==FALSE]
features
dim(features)
str(features)
names(testing[,!colSums(is.na(testing))])
variables <- names(testing[,!colSums(is.na(testing))])[8:59]
training <- training[,c(variables,"classe")]
testing <- testing[,c(variables,"problem_id")]
fullTraining <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!",""))
finalTest <- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
dim(fullTraining); dim(finalTest)
variables <- names(finalTest[,!colSums(is.na(finalTest))])[8:59]
fullTraining <- fullTraining[,c(variables,"classe")]
finalTest <- finalTest[,c(variables,"problem_id")]
inTrain <- createDataPartition(fullTraining$classe, p=0.6, list=FALSE)
training <- fullTraining[inTrain,]
testing <- fullTraining[-inTrain,]
dim(training); dim(testing);
modFitRF <- randomForest(classe ~ ., data = training, ntree = 1000)
predictionRF
predictionRF <- predict(modFitRF, testing, type = "class")
predictionRF
predictionRF <- predict(modFitRF, testing, type = "class")
confusionMatrix(predictionRF, testing$classe)
predictionRF <- predict(modFitRF, testing, type = "class")
fancyRpartPlot(modFitRF)
?repmis
install.packages('party')
install.packages('party')
library(caret); library(rattle); library(rpart); library(rpart.plot); library(randomForest); library(repmis); library(party)
set.seed(314159)
modFitDT <- rpart(classe ~ ., data=training, method="class")
predDT <- predict(modFitDT, testing, type = "class")
confusionMatrix(predictionsA1, myTesting$classe)
modFitDT <- rpart(classe ~ ., data=training, method="class")
predDT <- predict(modFitDT, testing, type = "class")
confusionMatrix(predDT, testing$classe)
knitr::opts_chunk$set(echo = TRUE)
varUsed(modRF, by.tree=FALSE, count=TRUE)
library(caret); library(rpart); library(randomForest);
set.seed(314159)
varUsed(modRF, by.tree=FALSE, count=TRUE)
fullTraining <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!",""))
finalTest <- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!",""))
dim(fullTraining); dim(finalTest)
variables <- names(finalTest[,!colSums(is.na(finalTest))])[8:59]
fullTraining <- fullTraining[,c(variables,"classe")]
finalTest <- finalTest[,c(variables,"problem_id")]
inTrain <- createDataPartition(fullTraining$classe, p=0.6, list=FALSE)
training <- fullTraining[inTrain,]
testing <- fullTraining[-inTrain,]
dim(training); dim(testing);
modFitDT <- rpart(classe ~ ., data=training, method="class")
predDT <- predict(modFitDT, testing, type = "class")
confusionMatrix(predDT, testing$classe)
modRF <- randomForest(classe ~ ., data = training, ntree = 1000)
predRF <- predict(modRF, testing, type = "class")
confusionMatrix(predRF, testing$classe)
varUsed(modRF, by.tree=FALSE, count=TRUE)
varUsed(modRF, by.tree=TRUE, count=FALSE)
q()
shiny::runApp('myApp')
runApp()
setwd("~/myApp")
runApp()
exit
q()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages('leaflet')
runApp()
runApp()
runApp()
install.packagages('leaflet.extras')
install.packages('leaflet.extras')
runApp()
runApp()
runApp()
runApp()
